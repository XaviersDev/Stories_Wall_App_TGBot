import asyncio
import logging
import os
import json
from datetime import datetime
from pathlib import Path

from aiohttp import web
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TOKEN = os.environ.get("BOT_TOKEN") 
WEBSITE_URL = "https://stories-wall-app.vercel.app/"  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π —Å–∞–π—Ç
ADMIN_IDS = [5155608716] # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

DATA_FILE = Path("storieswallbot/user_data.json")
STATS_FILE = Path("storieswallbot/stats.json")

Path("storieswallbot").mkdir(exist_ok=True)

# --- –£–ü–†–û–©–ï–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
class UserData:
    def __init__(self):
        self.stats = self.load_stats()
    
    def load_stats(self) -> dict:
        if STATS_FILE.exists():
            with open(STATS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {"total_users": 0, "known_users": []}
    
    def save_stats(self):
        STATS_FILE.parent.mkdir(exist_ok=True)
        with open(STATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.stats, f, indent=2, ensure_ascii=False)
    
    def register_user(self, user_id: int):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç."""
        if user_id not in self.stats["known_users"]:
            self.stats["total_users"] += 1
            self.stats["known_users"].append(user_id)
            self.save_stats()
            logger.info(f"New user registered: {user_id}. Total: {self.stats['total_users']}")

    def is_admin(self, user_id: int) -> bool:
        return user_id in ADMIN_IDS

user_db = UserData()


# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

def get_main_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç."""
    keyboard = [
        [InlineKeyboardButton(
            text="‚ú® –°–æ–∑–¥–∞—Ç—å —Å—Ç–µ–Ω–∫—É –Ω–∞ —Å–∞–π—Ç–µ",
            url=WEBSITE_URL
        )],
        [
            InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help"),
            InlineKeyboardButton(text="üíé –ü—Ä–∏–º–µ—Ä—ã", callback_data="examples")
        ]
    ]
    
    if user_db.is_admin(user_id):
        keyboard.append([
            InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_admin_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–û–õ–õ–ë–≠–ö–û–í ---

@router.message(CommandStart())
@router.callback_query(F.data == "back_to_main")
async def show_start_menu(event: Message | CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_db.register_user(event.from_user.id)
    
    text = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è StoriesWall.</b>\n\n"
        "–ú—ã –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞ –Ω–∞—à —Å–∞–π—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–µ–Ω–∫–∏ "
        "–±—ã—Å—Ç—Ä—ã–º, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö!\n\n"
        "–ù–∞ —Å–∞–π—Ç–µ —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "‚úÖ –£–≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá"
    )

    reply_markup = get_main_keyboard(event.from_user.id)

    if isinstance(event, Message):
        await event.answer(text, reply_markup=reply_markup, parse_mode="HTML")
    else:
        await event.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
        await event.answer()


@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    help_text = (
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç–µ–Ω–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ</b>\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ –Ω–∞ –æ–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É.\n"
        "3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –∏ —Ä–µ–∂–∏–º –æ–±—Ä–µ–∑–∫–∏.\n"
        "4Ô∏è‚É£ –£–≤–∏–¥–∏—à—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π —Å—Ç–µ–Ω–∫–∏.\n"
        "5Ô∏è‚É£ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–°–∫–∞—á–∞—Ç—å¬ª ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å ZIP-–∞—Ä—Ö–∏–≤.\n"
        "6Ô∏è‚É£ –†–∞—Å–ø–∞–∫—É–π –∞—Ä—Ö–∏–≤ –∏ –ø—É–±–ª–∏–∫—É–π —Å—Ç–æ—Ä–∏—Å –≤ –ø—Ä–æ—Ñ–∏–ª—å <b>–í –û–ë–†–ê–¢–ù–û–ú –ü–û–†–Ø–î–ö–ï!</b>\n\n"
        "‚ú® <b>–í–ê–ñ–ù–û:</b> –ù–∞—á–∏–Ω–∞–π –∑–∞–≥—Ä—É–∑–∫—É —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `story_09.png`), "
        "—á—Ç–æ–±—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ –æ–Ω–∏ –≤—ã—Å—Ç—Ä–æ–∏–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    )
    
    await callback.message.edit_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "examples")
async def show_examples(callback: CallbackQuery):
    examples_text = (
        "üíé <b>–ü—Ä–∏–º–µ—Ä—ã –≥–æ—Ç–æ–≤—ã—Ö —Å—Ç–µ–Ω–æ–∫:</b>\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥—è—Ç –∫—Ä—É—Ç—ã–µ —Å—Ç–µ–Ω–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö —É —ç—Ç–∏—Ö —Ä–µ–±—è—Ç:\n\n"
        "‚Ä¢ @AlliSighs\n"
        "‚Ä¢ @awlxa\n"
        "‚Ä¢ @monaki\n"
        "‚Ä¢ @detochka\n\n"
        "–í–¥–æ—Ö–Ω–æ–≤–ª—è–π—Å—è –∏ —Å–æ–∑–¥–∞–≤–∞–π —Å–≤–æ—é –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ! üé®"
    )
    
    await callback.message.edit_text(
        examples_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()

# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---
@router.callback_query(F.data == "admin_panel")
async def admin_panel(callback: CallbackQuery):
    if not user_db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    if not user_db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    stats = user_db.stats
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n\n"
        f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

# --- –û–ë–†–ê–ë–û–¢–ö–ê –õ–Æ–ë–û–ì–û –î–†–£–ì–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê ---
@router.message()
async def handle_other_messages(message: Message):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–≥–æ —É–≥–æ–¥–Ω–æ."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. "
        "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Ç–µ–Ω–∫—É, –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç üëá",
        reply_markup=get_main_keyboard(message.from_user.id),
        parse_mode="HTML"
    )

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –í–ï–ë-–°–ï–†–í–ï–†–ê ---
async def health_check(request):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –±–æ—Ç –∂–∏–≤."""
    return web.Response(text="Bot is running!")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health-—á–µ–∫–æ–≤ —Ö–æ—Å—Ç–∏–Ω–≥–∞."""
    app = web.Application()
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.environ.get('PORT', 10000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"üåê Web server started on port {port}")

async def main():
    dp.include_router(router)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
    await start_web_server()
    
    logger.info("üöÄ StoriesWall Bot (Gateway mode) started!")
    logger.info(f"üìä Initial users: {user_db.stats['total_users']}")
    logger.info(f"‚ö°Ô∏è Admins: {ADMIN_IDS}")
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
